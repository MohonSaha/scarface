// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }


'use client';

import { useState, useEffect } from "react";
// import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Loader from "@/components/shared/Preloader";
import { ToastProvider } from "@/components/ui/toast-context";
// import { Toaster } from "sonner"

// Metadata must be moved to a separate file when using 'use client'
// See separate metadata.ts file implementation below

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 0);
    
    return () => clearTimeout(timer);
  }, []);

  return (
    <html lang="en">
      <body className={` antialiased`}>
      <ToastProvider>
        {loading ? (
          <Loader
            onLoadingComplete={() => setLoading(false)} 
            logoSrc="/your-logo.png" // Replace with your actual logo path
          />
        ) : (
          children
        )}
        </ToastProvider>
      </body>
    </html>
  );
}